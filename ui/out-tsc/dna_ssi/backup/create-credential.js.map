{"version":3,"file":"create-credential.js","sourceRoot":"","sources":["../../../src/dna_ssi/backup/create-credential.ts"],"names":[],"mappings":"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","sourcesContent":["import { LitElement, html } from 'lit';\nimport { state, customElement } from 'lit/decorators.js';\nimport {\n  InstalledCell,\n  ActionHash,\n  Record,\n  AppWebsocket,\n  InstalledAppInfo,\n} from '@holochain/client';\nimport { contextProvided } from '@lit-labs/context';\nimport { appWebsocketContext, appInfoContext } from '../../contexts';\nimport { Credential } from './credential';\nimport '@material/mwc-button';\nimport '@material/mwc-textarea';\n\n@customElement('create-credential')\nexport class CreateCredential extends LitElement {\n  @state()\n  _value: string | undefined;\n\n  @state()\n  _pharase: string | undefined;\n\n  @state()\n  _credentials: Array<Credential> = [];\n\n  @contextProvided({ context: appWebsocketContext })\n  appWebsocket!: AppWebsocket;\n\n  @contextProvided({ context: appInfoContext })\n  appInfo!: InstalledAppInfo;\n\n  // constructor() {\n  //   this._credentials = ['red', 'green', 'blue'];\n  // }\n  async generatePassPharase() {\n    //debugger;\n    const cellData = this.appInfo.cell_data.find(\n      (c: InstalledCell) => c.role_id === 'dna_ssi'\n    )!;\n    const result = await this.appWebsocket.callZome({\n      cap_secret: null,\n      cell_id: cellData.cell_id,\n      zome_name: 'backup',\n      fn_name: 'mnemonic',\n      payload: null,\n      provenance: cellData.cell_id[1],\n    });\n    console.log(result);\n    this._pharase = result;\n  }\n\n  async get_my_credentials() {\n    //debugger;\n    const cellData = this.appInfo.cell_data.find(\n      (c: InstalledCell) => c.role_id === 'dna_ssi'\n    )!;\n    const result = await this.appWebsocket.callZome({\n      cap_secret: null,\n      cell_id: cellData.cell_id,\n      zome_name: 'backup',\n      fn_name: 'get_all_data',\n      payload: { pass_phrase: this._pharase },\n      provenance: cellData.cell_id[1],\n    });\n    console.log(result);\n    // this._pharase = result;\n    this._credentials = result;\n  }\n  async createCredential() {\n    const cellData = this.appInfo.cell_data.find(\n      (c: InstalledCell) => c.role_id === 'dna_ssi'\n    )!;\n\n    const credential: Credential = {\n      value: this._value!,\n      // pass_phrase: 'something',\n    };\n\n    const record: Record = await this.appWebsocket.callZome({\n      cap_secret: null,\n      cell_id: cellData.cell_id,\n      zome_name: 'backup',\n      fn_name: 'create_credential',\n      payload: { value: this._value, pass_phrase: this._pharase },\n      // payload: credential,\n      provenance: cellData.cell_id[1],\n    });\n\n    alert('Credential Saved!');\n\n    this.dispatchEvent(\n      new CustomEvent('credential-created', {\n        composed: true,\n        bubbles: true,\n        detail: {\n          actionHash: record.signed_action.hashed.hash,\n        },\n      })\n    );\n  }\n\n  render() {\n    return html` <div style=\"display: flex; flex-direction: column\">\n      <span style=\"font-size: 18px\">Generate Pass Pharase</span>\n      <mwc-textarea\n        outlined\n        label=\"\"\n        value=\"${this._pharase}\"\n        @input=${(e: CustomEvent) => {\n          this._pharase = (e.target as any).value;\n        }}\n      ></mwc-textarea>\n      <mwc-button\n        label=\"Generate passpharase\"\n        @click=${() => this.generatePassPharase()}\n      ></mwc-button>\n      <br />\n      <span>_____________________________</span>\n      <span style=\"font-size: 18px\">Create Credential</span>\n\n      <mwc-textarea\n        outlined\n        label=\"\"\n        @input=${(e: CustomEvent) => {\n          this._value = (e.target as any).value;\n        }}\n      ></mwc-textarea>\n\n      <mwc-button\n        label=\"Create Credential\"\n        @click=${() => this.createCredential()}\n      ></mwc-button>\n      <span>_____________________________</span>\n      <span style=\"font-size: 18px\">Get My Credentials</span>\n      <ul>\n        ${this._credentials.map(item => html`<li>${item.value}</li>`)}\n      </ul>\n      <mwc-button\n        label=\"Get MY Credentials\"\n        @click=${() => this.get_my_credentials()}\n      ></mwc-button>\n    </div>`;\n  }\n}\n"]}